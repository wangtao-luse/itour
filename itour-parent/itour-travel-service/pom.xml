<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.itour</groupId>
    <artifactId>itour-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <groupId>com.itour</groupId>
  <artifactId>itour-travel-service</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>itour-travel-service</name>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
    	<groupId>com.itour</groupId>
    	<artifactId>itour-travel-api</artifactId>
    	<version>0.0.1-SNAPSHOT</version>
    </dependency>
    <dependency>
		<groupId>com.itour</groupId>
		<artifactId>itour-common</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</dependency>
    <dependency>
    	<groupId>com.itour</groupId>
    	<artifactId>itour-travel-persist</artifactId>
    	<version>0.0.1-SNAPSHOT</version>
    </dependency>
    <dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	</dependency>
  </dependencies> 
   <build>
    <finalName>${project.artifactId}</finalName> 
    <plugins>
		<plugin>
		<!-- https://www.cnblogs.com/thinking-better/p/7827368.html -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
			<executions>
		        <execution>
		            <goals>
		                <goal>repackage</goal>
		            </goals>
		        </execution>
		    </executions>
		</plugin>		 
  	    <!-- docker 插件  可以帮助我们在Maven工程中通过简单的配置，自动生成镜像并推送到仓库中-->
		<plugin>
			<groupId>com.spotify</groupId>
			<artifactId>docker-maven-plugin</artifactId>
			<version>1.0.0</version>
			<configuration>
			<!-- 镜像名称 -->
			<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
			<!-- 指定标签 -->
			<imageTags>
				<imageTag>${docker.imageTag}</imageTag>
			</imageTags>
			<!-- 基础镜像java 1.8 -->
			<baseImage>java</baseImage>
			<!-- 制作者提供本人信息 -->
			<maintainer>${docker.maintainer}</maintainer>
			<!-- 切换到/root目录 -->
			<workdir>/ROOT</workdir>
			<cmd>${docker.cmd}</cmd>
			<entryPoint>${docker.entryPoint}</entryPoint>
			<!-- 指定远程docker api 地址 -->
			<dockerHost>${docker.dockerHost}</dockerHost> 
			<!-- 指定Dockerfile文件的位置
			<dockerDirectory>src/main/docker</dockerDirectory> -->
			<resources>
				<resource>
					<targetPath>/ROOT</targetPath>
					<!-- 指定需要复制的根目录:${project.build.directory}表示target目录 -->
					<directory>${project.build.directory}</directory>
				    <!-- 指定需要复制的文件  ${project.build.finalName}.jar指的是打包后的文件-->
					<include>${project.build.finalName}.jar</include>
				</resource>
			</resources>
			</configuration>
			<!-- 以上还需要通过mvn clean package docker:build 手动构建镜像，在<plugin>添加以下插件即可以
			  在项目打包Package的时候即可自动构建镜像,只需要run就可以访问了;
			  当执行mvn package时执行mvn clean package docker:build
			   -->
			<executions>
				<execution>
				   <id>build-image</id>
				   <phase>package</phase>
				   <goals>
				    <goal>build</goal>
				   </goals>
				</execution>
			</executions>
		</plugin>
	  </plugins>
  </build>
</project>
