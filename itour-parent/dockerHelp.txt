项目模块容器Docker命令
docker [options] IMAGE [COMMAND]
-d:创建一个守护式容器在后台一直运行
-i:表示运行容器;
-t:表示容器启动后会进入命令行,加上这个参数后，容器创建就能登录进去，即分配了一个伪终端.
--name:指定容器名字,后续可以通过名字进行容器管理
-p:端口映射
-v:给容器挂载存储卷，挂载到容器的某个目录 宿主机目录：容器目录 (将宿主机的目录挂载到容器中)
   (将主机目录与容器目录之间进行共享)
--restart=always:重启docker时，自动启动相关容器
--privileged=true 容器内部对挂载的目录拥有读写等特权
1.itour-eureka-server

  docker run -d -p 9090:9090 \
     --name itour-eureka-server \
     --restart=always \
     ben/itour-eureka-server 

2.itour-account-service

  docker run -d -p 9092:9092 \
      --name itour-account-service \
       --restart=always \
      ben/itour-account-service 

3.itour-travel-service

  docker run -d -p 9082:9082 \
     --name itour-travel-service \
     --restart=always \
     ben/itour-travel-service 
     

4.itour-dictionary-service

docker run -d -p 9099:9099 \
   --name itour-dictionary-service \
   --restart=always \
   ben/itour-dictionary-service  

5.itour-work-service

docker run -d -p 9083:9083 \
   --name itour-work-service  \
   --restart=always \
   ben/itour-work-service 

6.itour-member-service

docker run -d -p 9098:9098  \
   --name itour-member-service  \
   --restart=always \
   ben/itour-member-service 

7.itour-quartz-service

docker run -d -p 9081:9081 \
   --name itour-quartz-service  \
   --restart=always \
   ben/itour-quartz-service 

8.itour-online-manager-web

docker run -d -p 9095:9095 \
   --name itour-online-manager-web  \
   --restart=always \
   ben/itour-online-manager-web 

9.itour-online-web
docker run -d -p 9093:9093 \
   --name itour-online-web \
   --restart=always \
   -v /itour/img/code:/itour/img/code \
   -v  /root/spro/itour/upload:/root/spro/itour/upload \
   ben/itour-online-web  

Portainer-ce
docker run -d -p 9000:9000  --name ben-portainer \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v portainer_data:/data \
    portainer/portainer-ce
MYSQL
192.168.1.88
docker run  -d  --restart=always  --name ben-dev-mysql -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=root -p 3308:3306 -v /var/dev/mysqldata:/var/lib/mysql -v /var/dev/mysql/conf:/etc/mysql/conf.d  mysql --lower-case-table-names=1
docker run  -d  --restart=always  --name ben-test-mysql -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=mysql@958958 -p 3307:3306 -v /var/test/mysqldata:/var/lib/mysql -v /var/test/mysql/conf:/etc/mysql/conf.d  mysql --lower-case-table-names=1
docker run  -d  --restart=always  --name ben-pro-mysql -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=mysql@958958 -p 3306:3306 -v /var/pro/mysqldata:/var/lib/mysql  -v /var/pro/mysql/conf:/etc/mysql/conf.d  mysql  --lower-case-table-names=1

 

Redis 
192.168.1.88
docker run -itd --restart=always --name ben-spro-redis -p 6379:6379 -v /var/myredis/data:/data  -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf redis --requirepass 'redis@958958'
docker run -itd --restart=always --name ben-test-redis -p 6380:6379 -v /var/myredis/data:/data  -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf redis --requirepass 'redis@958958'


Minio
单点模式
docker run -d -p 9800:9800  \
   -p 9801:9801 \
   --name minio-service \
   --restart=always \
   -e "MINIO_ROOT_USER=root" \
   -e "MINIO_ROOT_PASSWORD=top@958958" \
   -v /opt/minio/data:/data  \
   -v /etc/minio/config:/root/.minio \
    minio/minio server /data \
    --console-address ":9801"
    
    
    
    

纠删码模式
docker run -d  -p 9000:9000 -p 9001:9001 \
 --name minio \
-v /mnt/data1 :/data1\
-v /mnt/data2 :/data2\
-v /mnt/data3 :/data3\
-v /mnt/data4 :/data4\
-v /mnt/data5 :/data5\
-v /mnt/data6 :/data6\
-v /mnt/data7 :/data7\
-v /mnt/data8 :/data8\
minio/minio server /data{1...8}  --console-address ":9801"


minio server http://192.168.1.18/export1 http://192.168.1.18/export2 \
			 http://192.168.1.18/export3 http://192.168.1.18/export4 \
			 http://192.168.1.68/export1 http://192.168.1.68/export2 \
			 http://192.168.1.68/export3 http://192.168.1.68/export4 \
			 http://192.168.1.88/export1 http://192.168.1.88/export2 \
			 http://192.168.1.88/export3 http://192.168.1.88/export4 \
			 http://192.168.1.14/export1 http://192.168.1.14/export2 \
			 http://192.168.1.14/export3 http://192.168.1.14/export4


Nginx 
Nginx  https://www.cnblogs.com/qiqiloved/p/13470064.html
1.在/mnt目录,创建挂载目录;
  mkdir -p ./nginx/{html,log,conf}
2.运行nginx
  docker run -d --name nginx -p 81:81 nginx
3.将nginx容器内部配置文件挂载到主机
  a.复制容器配置文件
   docker cp c10d0b833743:/etc/nginx/nginx.conf  ./
   docker cp c10d0b833743:/etc/nginx/conf.d/default.conf ./conf/
4.移除运行的nginx
 docker stop contrainer_id
 docker rm contrainer_id
 contrainer_id:容器ID
5.运行nginx 
docker run -d --name spro-nginx -p 80:80  -v /mnt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /mnt/nginx/log:/var/log/nginx -v /mnt/nginx/html:/usr/share/nginx/html -v /mnt/nginx/conf:/etc/nginx/conf.d  --restart=always  --privileged=true nginx
添加ssl证书
docker run -d --name spro-nginx -p 80:80  -v /mnt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /mnt/nginx/log:/var/log/nginx -v /mnt/nginx/html:/usr/share/nginx/html -v /mnt/nginx/conf:/etc/nginx/conf.d  -v /mnt/nginx/certificate:/etc/nginx/certificate --restart=always  --privileged=true nginx

配置文件目录：/etc/nginx
默认首页html文件目录：/usr/share/nginx/html
日志目录:/var/log/nginx

frps:
docker run -d   -p 8081:8081 \
   -p 8082:8082 \
   -p 8083:8083 \
   -p 8084:8084 \
   -p 8085:8085 \
   -p 6000:6000 \
   --name frp-server \
   --restart=always  \
   -v /mnt/frp/frps.ini:/conf/frps.ini \
   cloverzrg/frps-docker
frpc:
docker run -d -p 8085:8085 \
   --name frp-client \
   --restart=always  \
   -v /etc/frpc/conf:/conf \
   cloverzrg/frpc-docker

vim /mnt/frp/frps.ini
[common]
#必选项,指定客户端与服务端通信使用的端口
bind_port = 8081
#非必选项,设置监听 HTTP 请求端口(http代理时必选项)可与bind_port设置一样
vhost_http_port = 8082
#非必选项,设置监听HTTPS请求端口(https代理时必选项)可与bind_port设置一样
vhost_https_port = 8083
#配置frp后台管理页面;
dashboard_addr = 0.0.0.0
dashboard_port = 8084
dashboard_user = admin
dashboard_pwd = admin
#用于frps和frpc的校验
token = 91a6b87a-6842-763a-8282-9fd65e1242fb

